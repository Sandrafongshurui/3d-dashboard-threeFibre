/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 Buoy-draco.glb
*/

import React, { useState, useEffect } from 'react'
import { useGLTF, Box, Plane } from '@react-three/drei'
import Axios from 'axios'

export function Buoy(props) {
  const { nodes, materials } = useGLTF('/Buoy-draco.glb')
  const [data, setData] = useState(null)
  const [selected] = useState(false)
  // const [data, ]
  // let modelData = {}

  useEffect(() => {
    try {
      console.log('mount')
      const fetchData = async () => {
        console.log('fetch data every 1min')
        const response = await Axios.get(
          `${process.env.REACT_APP_API}/data/bus/`,
        )
        setData(response.data.NextBus)
        //setData(response.data)
        console.log(response.data.NextBus)
        // console.log(typeof response.data)
      }
      fetchData()
      const intervalId = setInterval(fetchData, 1000 * 60)
      return () => {
        console.log('unmount')
        clearInterval(intervalId)
      }
    } catch (error) {
      console.log('error', error)
    }
  }, [])

  return (
    <>
      <group
        {...props}
        rotation={[-Math.PI / 2, 0, 0]}
        dispose={null}
        onPointerDown={(e) => {
          e.stopPropagation()
          console.log('click', !selected, data)
          props.data(data)
          props.clickMesh(!selected)
        }}
      >
        
        <spotLight
          castShadow
          intensity={1}
          args={['blue', 1, 100]}
          position={[-1, 1, 1]}
        />
        {/* <group rotation={[-Math.PI / 2, 0, 0]}> */}
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Circle03.geometry}
            material={materials.orange_glass}
            position={[0, 0, 1.38]}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Line02.geometry}
            material={materials.gold}
            position={[0, 0, 0.7]}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Object01.geometry}
            material={materials.aluminium_orange}
            position={[0, 0, 1.31]}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Object02.geometry}
            material={materials.aluminium_orange}
            position={[0, 0, 0.92]}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Rectangle01.geometry}
            material={materials.gold}
            position={[0, 0, 0.75]}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Line03.geometry}
            material={materials.aluminium_orange}
            position={[0, 0, 0.31]}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Circle02.geometry}
            material={materials.aluminium_orange}
            position={[0, 0, 1.44]}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Object03.geometry}
            material={materials.aluminium_orange}
            position={[0, 0, 1.02]}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Rectangle02.geometry}
            material={materials.aluminium_orange}
            position={[0, 0, 0.72]}
          />
          <mesh castShadow receiveShadow position={[0, 0.5, 1]}>
            <boxGeometry />
            <meshStandardMaterial attach="material" color="white" />
          </mesh>
          <Plane
            receiveShadow
            // rotation={[-Math.PI / 2, 0, 0]}
            // position={[0, -1, 0]}
            args={[1000, 1000]}
          >
            <meshStandardMaterial attach="material" color="white" />
          </Plane>
        {/* </group> */}
      </group>
    </>
  )
}

useGLTF.preload('/Buoy-draco.glb')
